name: Deploy to ECS

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: novaura-acs-processor
  ECS_CLUSTER: novaura-acs-processor-cluster
  ECS_SERVICE_SCHEDULER: novaura-acs-processor-scheduler
  ECS_SERVICE_WORKER: novaura-acs-processor-worker

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest
          
      - name: Run tests
        run: |
          python -m pytest

  build-and-push:
    name: Build and Push
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

  deploy:
    name: Deploy Infrastructure
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v3
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: "1.0.0"

      - name: Terraform Init
        run: terraform init
        working-directory: terraform

      - name: Terraform Plan
        run: terraform plan
        working-directory: terraform
        env:
          TF_VAR_environment: production
          TF_VAR_ecr_repository_url: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}
          TF_VAR_db_name: ${{ secrets.DB_NAME }}
          TF_VAR_db_user: ${{ secrets.DB_USER }}
          TF_VAR_db_host: ${{ secrets.DB_HOST }}
          TF_VAR_db_password_arn: ${{ secrets.DB_PASSWORD_ARN }}
          TF_VAR_django_secret_key_arn: ${{ secrets.DJANGO_SECRET_KEY_ARN }}
          TF_VAR_private_subnet_ids: ${{ secrets.PRIVATE_SUBNET_IDS }}
          TF_VAR_vpc_id: ${{ secrets.VPC_ID }}

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main'
        run: terraform apply -auto-approve
        working-directory: terraform
        env:
          TF_VAR_environment: production
          TF_VAR_ecr_repository_url: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}
          TF_VAR_db_name: ${{ secrets.DB_NAME }}
          TF_VAR_db_user: ${{ secrets.DB_USER }}
          TF_VAR_db_host: ${{ secrets.DB_HOST }}
          TF_VAR_db_password_arn: ${{ secrets.DB_PASSWORD_ARN }}
          TF_VAR_django_secret_key_arn: ${{ secrets.DJANGO_SECRET_KEY_ARN }}
          TF_VAR_private_subnet_ids: ${{ secrets.PRIVATE_SUBNET_IDS }}
          TF_VAR_vpc_id: ${{ secrets.VPC_ID }} 